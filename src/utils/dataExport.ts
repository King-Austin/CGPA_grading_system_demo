import jsPDF from 'jspdf';

export interface ExportData {
  semestersData: Record<string, Record<string, any>>;
  totalCourses: number;
  totalCompletedCourses: number;
  cgpa: number;
  exportDate: string;
  version: string;
}

export interface CourseWithGrade {
  code: string;
  title: string;
  creditUnit: number;
  grade?: string;
  category?: string;
}

// Export GPA report as PDF
export const exportGPAReportAsPDF = async (
  data: ExportData,
  elementId?: string
): Promise<void> => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Title
  pdf.setFontSize(20);
  pdf.setTextColor(59, 130, 246); // Blue color
  pdf.text('Student GPA/CGPA Report', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Date
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Generated on: ${new Date(data.exportDate).toLocaleDateString()}`, 20, yPosition);
  yPosition += 10;

  // Summary Statistics
  pdf.setFontSize(14);
  pdf.setTextColor(59, 130, 246);
  pdf.text('Academic Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(11);
  pdf.setTextColor(0, 0, 0);
  pdf.text(`Cumulative GPA (CGPA): ${data.cgpa.toFixed(2)}`, 25, yPosition);
  yPosition += 8;
  pdf.text(`Total Courses: ${data.totalCourses}`, 25, yPosition);
  yPosition += 8;
  pdf.text(`Completed Courses: ${data.totalCompletedCourses}`, 25, yPosition);
  yPosition += 15;

  // Course Details by Semester
  pdf.setFontSize(14);
  pdf.setTextColor(59, 130, 246);
  pdf.text('Course Details by Semester', 20, yPosition);
  yPosition += 10;

  Object.entries(data.semestersData).forEach(([semesterKey, courses]) => {
    if (yPosition > pageHeight - 50) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(12);
    pdf.setTextColor(59, 130, 246);
    const [year, semester] = semesterKey.split('-');
    pdf.text(`Year ${year}, Semester ${semester}`, 20, yPosition);
    yPosition += 8;

    pdf.setFontSize(10);
    pdf.setTextColor(0, 0, 0);

    Object.values(courses as Record<string, CourseWithGrade>).forEach((course: CourseWithGrade) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }

      const gradeText = course.grade ? ` - Grade: ${course.grade}` : ' - Not graded';
      pdf.text(`${course.code}: ${course.title} (${course.creditUnit} CU)${gradeText}`, 25, yPosition);
      yPosition += 6;
    });

    yPosition += 5;
  });

  // Footer
  const footerY = pageHeight - 15;
  pdf.setFontSize(8);
  pdf.setTextColor(128, 128, 128);
  pdf.text('Generated by Course Score Scribe - GPA Tracker', pageWidth / 2, footerY, { align: 'center' });

  // Save the PDF
  const fileName = `gpa-report-${new Date().toISOString().split('T')[0]}.pdf`;
  pdf.save(fileName);
};
